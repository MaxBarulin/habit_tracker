name: Django CI

on: [push]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH  # Добавление Poetry в PATH
      - name: Install dependencies
        run: poetry install --no-root
      - name: Run Flake8
        run: poetry run flake8 .

  test:
    runs-on: ubuntu-latest
    needs: lint

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.13'

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH  # Добавление Poetry в PATH

      - name: Install dependencies
        run: poetry install --no-root

      - name: Run tests
        env:
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: poetry run python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Log in to Docker Hub
        run: echo ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} | docker login -u ${{ secrets.DOCKER_HUB_USERNAME }} --password-stdin

      - name: Build and Push Docker images with Docker Compose
        run: |
          docker-compose build
          docker-compose push

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy to Server and Run
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |

            PROJECT_DIR=~/habit_tracker 
            GIT_REPO_URL=https://github.com/MaxBarulin/habit_tracker.git 
            
            if [ -d "$PROJECT_DIR" ]; then
              echo "Project directory exists. Pulling latest changes."
              cd $PROJECT_DIR
              git pull
            else
              echo "Project directory does not exist. Cloning repository."
              git clone $GIT_REPO_URL $PROJECT_DIR
              cd $PROJECT_DIR
            fi
            
            echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" > .env
            echo "DEBUG=False" >> .env
            echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
            echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
            echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
            echo "SERVER_IP=${{ secrets.SERVER_IP }}" >> .env
            echo "SSH_KEY=${{ secrets.SSH_KEY }}" >> .env
            echo "SSH_USER=${{ secrets.USER }}" >> .env
            echo "DOCKER_HUB_ACCESS_TOKEN=${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" >> .env
            echo "DOCKER_HUB_USERNAME=${{ secrets.DOCKER_HUB_USERNAME }}" >> .env
            echo "HOST=${{ secrets.HOST }}" >> .env 
            echo "PORT=${{ secrets.PORT }}" >> .env

            docker-compose pull
            
            docker-compose up -d
            
            echo "Waiting for database to be ready..."
            sleep 10 
            docker-compose exec backend python manage.py migrate --noinput
            
            docker-compose exec backend python manage.py collectstatic --noinput
            
            docker image prune -af
